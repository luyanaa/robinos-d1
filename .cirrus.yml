compute_engine_instance:
  image_project: cirrus-images
  image: family/docker-builder
  platform: linux
  cpu: 8
  memory: 32G

env:
  CROSS_COMPILE: riscv64-linux-gnu-
  ARCH: riscv
  SKIP_INSTALL_PACKAGE: no
  HOME: /tmp/cirrus-ci-build/
  OUT_DIR: /tmp/cirrus-ci-build/output
  DEVICE: /dev/loop100
  DISTURB: robinos
  BASE: https://mirrors.openanolis.cn/alt/risc-v/images/anolisos-disk-minimal-an8-Rawhide-sda.raw.xz
  TOOLCHAINS: https://github.com/YuzukiHD/YuzukiSBC-Toolchains/releases/download/thead-riscv/riscv64-glibc-gcc-thead_20200702.tar.xz
  KBUILD_BUILD_USER: robinos-d1
  KBUILD_BUILD_HOST: robinos-d1

task:
  machine_init_script: |
    scripts/machine_init.sh

  install_qemu_script: |
    scripts/qemu_setup.sh

  install_build_script: |
    scripts/install_deps.sh

  download_root_tarball_script: |
    wget -O base.raw.xz ${BASE}

  create_rootfsimg_script: |
    losetup -P "${DEVICE}" rootfs.img
    parted -s -a optimal -- "${DEVICE}" mklabel gpt
    parted -s -a optimal -- "${DEVICE}" mkpart primary fat32 40MiB 500MiB
    parted -s -a optimal -- "${DEVICE}" set 1 esp on
    parted -s -a optimal -- "${DEVICE}" mkpart primary ext4 500MiB 1000MiB
    parted -s -a optimal -- "${DEVICE}" mkpart primary ext4 1000MiB 100%
    partprobe "${DEVICE}"
    mkfs.vfat -F32 -n efi "${DEVICE}p1"
    mkfs.ext4 -F -L boot "${DEVICE}p2"
    mkfs.ext4 -F -L root "${DEVICE}p3"
    mount "${DEVICE}p3" rootfs
    mkdir rootfs/boot
    mount "${DEVICE}p2" rootfs/boot
    mkdir rootfs/boot/efi
    mount "${DEVICE}p1" rootfs/boot/efi

  unpack_root_tarball_script: |
    xz -d base.raw.xz
    losetup -P /dev/loop101 base.raw
    mount /dev/loop101p2 /mnt
    pushd rootfs
      cp -avr /mnt/* .
    popd

  mount_and_setup_script: |
    scripts/rootfs_setup.sh

  update_root_tarball_script: |
    scripts/update_rootfs.sh

  matrix:
    - name: d1
      env:
        base_path: d1
        kernel_branch: riscv/d1-wip-vector
        kernel_git: https://github.com/Rabenda/linux-d1.git
        kernel_config: nezha_defconfig
        opensbi_branch: d1-wip
        opensbi_git: https://github.com/smaeul/opensbi.git
        uboot_branch: d1-wip
        uboot_git: https://github.com/smaeul/u-boot.git
        uboot_config: nezha_defconfig

      kernel_script: |
        wget -O riscv64-glibc-gcc-thead_20200702.tar.xz ${TOOLCHAINS}
        sudo tar -xvf riscv64-glibc-gcc-thead_20200702.tar.xz -C /opt
        export OLDPATH=$PATH
        export PATH=/opt/riscv64-glibc-gcc-thead_20200702/bin:$PATH
        git clone --depth=1 -b ${kernel_branch} ${kernel_git} kernel
        pushd kernel
          export DIR=$PWD
          echo "CONFIG_LOCALVERSION=${KERNEL_RELEASE}" >> ${DIR}/arch/riscv/configs/${kernel_config}
          echo 'CONFIG_WIRELESS=y' >> ${DIR}/arch/riscv/configs/${kernel_config}
          echo 'CONFIG_CFG80211=m' >> ${DIR}/arch/riscv/configs/${kernel_config}
          # enable /proc/config.gz
          echo 'CONFIG_IKCONFIG=m' >> ${DIR}/arch/riscv/configs/${kernel_config}
          echo 'CONFIG_IKCONFIG_PROC=y' >> ${DIR}/arch/riscv/configs/${kernel_config}
          # enable systemV IPC (needed by fakeroot during makepkg)
          echo 'CONFIG_SYSVIPC=y' >> ${DIR}/arch/riscv/configs/${kernel_config}
          echo 'CONFIG_SYSVIPC_SYSCTL=y' >> ${DIR}/arch/riscv/configs/${kernel_config}
          # enable swap
          echo 'CONFIG_SWAP=y' >> ${DIR}/arch/riscv/configs/${kernel_config}
          echo 'CONFIG_ZSWAP=y' >> ${DIR}/arch/riscv/configs/${kernel_config}
          # enable Cedrus VPU Drivers
          echo 'CONFIG_MEDIA_SUPPORT=y' >> ${DIR}/arch/riscv/configs/${kernel_config}
          echo 'CONFIG_MEDIA_CONTROLLER=y' >> ${DIR}/arch/riscv/configs/${kernel_config}
          echo 'CONFIG_MEDIA_CONTROLLER_REQUEST_API=y' >> ${DIR}/arch/riscv/configs/${kernel_config}
          echo 'CONFIG_V4L_MEM2MEM_DRIVERS=y' >> ${DIR}/arch/riscv/configs/${kernel_config}
          echo 'CONFIG_VIDEO_SUNXI_CEDRUS=y' >> ${DIR}/arch/riscv/configs/${kernel_config}
          # enable binfmt_misc
          echo 'CONFIG_BINFMT_MISC=y' >> ${DIR}/arch/riscv/configs/${kernel_config}
          # enable EFI
          echo 'CONFIG_EFI=y' >> ${DIR}/arch/riscv/configs/${kernel_config}
          echo 'CONFIG_EFI_STUB=y' >> ${DIR}/arch/riscv/configs/${kernel_config}
          # echo 'CONFIG_EFI_ZBOOT=y' >> ${DIR}/arch/riscv/configs/${kernel_config}
          # enable fat
          echo 'CONFIG_VFAT_FS=y' >> ${DIR}/arch/riscv/configs/${kernel_config}
          echo 'CONFIG_FAT_DEFAULT_IOCHARSET="iso8859-15"' >> ${DIR}/arch/riscv/configs/${kernel_config}
          echo 'CONFIG_FAT_DEFAULT_UTF8=y' >> ${DIR}/arch/riscv/configs/${kernel_config}
          echo 'CONFIG_EXFAT_FS=y' >> ${DIR}/arch/riscv/configs/${kernel_config}
          echo 'CONFIG_NLS_CODEPAGE_437=y' >> ${DIR}/arch/riscv/configs/${kernel_config}
          echo 'CONFIG_NLS_ISO8859_15=y' >> ${DIR}/arch/riscv/configs/${kernel_config}
          echo 'CONFIG_NLS_DEFAULT="utf8"' >> ${DIR}/arch/riscv/configs/${kernel_config}
          echo 'CONFIG_NLS_UTF8=y' >> ${DIR}/arch/riscv/configs/${kernel_config}
          # enable vector
          echo 'CONFIG_VECTOR=y' >> ${DIR}/arch/riscv/configs/${kernel_config}

          make CROSS_COMPILE=riscv64-unknown-linux-gnu- ARCH=riscv ${kernel_config}
          sed -i '/CONFIG_LOCALVERSION_AUTO/d' .config && echo "CONFIG_LOCALVERSION_AUTO=n" >> .config
          make CROSS_COMPILE=riscv64-unknown-linux-gnu- ARCH=riscv -j$(nproc)
          if [ x"$(cat .config | grep CONFIG_MODULES=y)" = x"CONFIG_MODULES=y" ]; then
            make CROSS_COMPILE=riscv64-unknown-linux-gnu- ARCH=riscv INSTALL_MOD_PATH=../rootfs/ modules_install -j$(nproc)
          fi
          make CROSS_COMPILE=riscv64-unknown-linux-gnu- ARCH=riscv INSTALL_PATH=../rootfs/boot install -j$(nproc)

          cp -v arch/riscv/boot/dts/allwinner/sun20i-d1-nezha.dtb ../rootfs/boot/
          
          # Backup kernel build config
          cp -v .config ../rootfs/boot/latest-config
          ls -al ../rootfs/boot/
        popd
        export PATH=$OLDPATH

      uboot_script: |
        DIR='opensbi'
        git clone --depth=1 -b ${opensbi_branch} ${opensbi_git} ${DIR}
        pushd ${DIR}
          make CROSS_COMPILE="${CROSS_COMPILE}" PLATFORM=generic FW_PIC=y FW_OPTIONS=0x2
        popd
        cp opensbi/build/platform/generic/firmware/fw_dynamic.bin ${OUT_DIR}

        DIR='u-boot'
        git clone --depth=1 -b ${uboot_branch} ${uboot_git} ${DIR}
        pushd ${DIR}
          make CROSS_COMPILE="${CROSS_COMPILE}" ARCH="${ARCH}" ${uboot_config}
          make CROSS_COMPILE="${CROSS_COMPILE}" ARCH="${ARCH}" OPENSBI="${OUT_DIR}/fw_dynamic.bin" -j$(nproc)
        popd
        cp ${DIR}/u-boot-sunxi-with-spl.bin "${OUT_DIR}"

      flash_boot_spl_script: |
        dd if="${OUT_DIR}/u-boot-sunxi-with-spl.bin" of="${DEVICE}" bs=1024 seek=128

      install_grub_script: |
        mkdir -p rootfs/boot/efi/efi/boot/
        cp -v common/grubriscv64.efi rootfs/boot/efi/efi/boot/bootriscv64.efi
        mkdir -p rootfs/boot/boot
        cp -v $base_path/uEnv.txt rootfs/boot/boot
        export kernel_version=$(ls rootfs/boot/ | grep vmlinuz- | sed 's/vmlinuz-//' | head -n 1 )
        cp -v $base_path/grub.cfg rootfs/boot/
        sed -i "s/custom_kernel_version/$kernel_version/g" rootfs/boot/grub.cfg

  clean_rootfs_script: |
    scripts/clean_rootfs.sh

  upload_publish_script: |
    scripts/publish.sh

  kernel_build_artifacts:
    path: "${DISTURB}-kernel-${base_path}-*.tar.zst"

  upload_artifacts:
    path: "${DISTURB}-*-*.img.zst"
